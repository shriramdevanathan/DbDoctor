/* Second Page Graph and JavascriptCreated By Nikil Vasudevan*/var monitor;var monitor_value;var monitor_name;var timevalue;var dmonitor1_value,dmonitor2_value;var lgraphvalue1,lgraphvalue2;var xkeys,ykeys;var ledvalue;var chart1,chart2,chart3,chart4;var seriesoptiony = [] , seriesoptionx = [];function getMonitor(){	$.ajax({		type: "POST", 		data: {action: 'gmonitor',id:monitor},		cache: false,		url: "ldb.php",		async: false,		success: function(mddata){			monitor_value = $.parseJSON(mddata)[1];			monitor_name = $.parseJSON(mddata)[0];					}	});}function getAllGraph() {	monitor = getUrlVars()["id"];	if(monitor.charAt(monitor.length-1) == "#"){		monitor = monitor.substring(0, monitor.length-1);	}	getTimeData();	poll_threshold();	drawMonitor();	getLed();	getNDynamicMonitor1();	getNDynamicMonitor2();	getNDynamicMonitor1y();	getNDynamicMonitor2x();		getNDetails();	getBaseLineParam();}function getUrlVars() {	var vars = {};	var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {		vars[key] = value;	});	return vars;}var thresholdValue;function poll_threshold(){	$.ajax({		type: "POST", 		data: {action: 'threshold',},		cache: false,		url: "db.php",		async: false,		success: function(data){			thresholdValue = eval('(' + data + ')');		}	});}function getMGraph(id, data, name, v1, v2){	var min = 0;	var max = 100;		var meter = new RGraph.Meter(id, min, max, data);	var grad1 = meter.context.createRadialGradient(meter.canvas.width / 2,meter.canvas.height - 25,0,meter.canvas.width / 2,meter.canvas.height - 25,200);	grad1.addColorStop(0, 'green');	grad1.addColorStop(1, 'white');            	var grad2 = meter.context.createRadialGradient(meter.canvas.width / 2, meter.canvas.height - 25,0,meter.canvas.width / 2, meter.canvas.height - 25,200);	grad2.addColorStop(0, 'yellow');	grad2.addColorStop(1, 'white');            	var grad3 = meter.context.createRadialGradient(meter.canvas.width / 2, meter.canvas.height - 25,0,meter.canvas.width / 2, meter.canvas.height - 25,200);	grad3.addColorStop(0, 'red');	grad3.addColorStop(1, 'white');            	meter.Set('chart.labels.position', 'inside');	meter.Set('chart.title', name);	meter.Set('chart.title.vpos', 0.5);	meter.Set('chart.title.color', 'black');	//meter.Set('chart.green.color', grad3);	//meter.Set('chart.yellow.color', grad2);	//meter.Set('chart.red.color', grad1);	meter.Set('chart.red.start', v2);	meter.Set('chart.red.end', 100);	meter.Set('chart.yellow.start', v1);	meter.Set('chart.yellow.end', v2);	meter.Set('chart.green.start', 0);	meter.Set('chart.green.end', v1);	meter.Set('chart.border', false);	meter.Set('chart.needle.linewidth', 5);	meter.Set('chart.needle.tail', true);	meter.Set('chart.tickmarks.big.num', 0);	meter.Set('chart.tickmarks.small.num', 0);	meter.Set('chart.segment.radius.start', 100);	meter.Set('chart.needle.radius', 80);	meter.Set('chart.needle.linewidth', 2);	meter.Set('chart.linewidth.segments', 15);	meter.Set('chart.strokestyle', 'white');	meter.Set('chart.text.size', 14);	return meter;}function drawMonitor (e){	getMonitor(monitor);	if(typeof  monitor_value != 'undefined' && typeof thresholdValue != 'undefined'){		var cname = "smonitor";			RGraph.Clear(document.getElementById(cname));		var graph = getMGraph(cname, monitor_value, monitor_name, thresholdValue[monitor][0], thresholdValue[monitor][1]);		graph.Draw();	}	setTimeout(drawMonitor,timevalue[1]*1000);}    function getTimeData(e){    $.ajax({        type: "POST",  		data: {action: 'timedata'},		cache: false,		url: "db.php",		async: false,		success: function(tdata){			timevalue = eval('(' + tdata + ')');		}	});}function getDynamicMonitor(id,level,value){    $.ajax({        type: "POST", 		data: {action: 'dmonitor',id:id,level:level,nvalue:value},		cache: false,		url: "ldb.php",		async: false,		success: function(tdata){			dmonitor1_value = eval('(' + tdata + ')');		}			});}  function getDynamicMonitor1(id,level,value){    $.ajax({        type: "POST", 		data: {action: 'dmonitor',id:id,level:level,nvalue:value},		cache: false,		url: "ldb.php",		async: false,		success: function(tdata){			dmonitor2_value = eval('(' + tdata + ')');		}			});} var click = 0;function checkAlert(){	if(!click){		click = 1;		$.ajax({			type: "POST", 			data: {action: 'alertdata',},			cache: false,			url: "db.php",			async: false,			success: function(html){				$("#alertmsg").html(html);			}		});	}else{		click = 0;	}}function poll1(id,level,value){    $.ajax({        type: "POST", 		data: {action: 'lquery',id:id,level:level,nvalue:value},		cache: false,		url: "ldb.php",		async: false,        success: function(data){				lgraphvalue1 = eval('(' + data + ')');        }    });}function poll2(id,level,value){    $.ajax({        type: "POST", 		data: {action: 'lquery',id:id,level:level,nvalue:value},		cache: false,		url: "ldb.php",		async: false,        success: function(data){				lgraphvalue2 = eval('(' + data + ')');        }    });}function fetchLed(id){    $.ajax({        type: "POST", 		data: {action: 'leddata',id:id},		cache: false,		url: "ldb.php",		async: false,		success: function(tdata){			ledvalue = eval('(' + tdata + ')');		}	});}function drawLed(id,data){		var led = new RGraph.LED(id,data);		led.Set('chart.zoom.hdir', 'center');		led.Set('chart.zoom.vdir', 'center');		led.Set('chart.light', 'red');		led.Draw();}function getLed(){	fetchLed(monitor);	var led_no = 1;	for (var lkey in ledvalue){		if(led_no < 5){			var ledid = "led"+led_no;			drawLed(ledid,ledvalue[lkey]);			var ledtext = "#graphtitle"+led_no;			$(ledtext).text(lkey);			var sled = "#cled"+led_no;			$(sled).css('display','inline-block');			led_no++;		}	}	setTimeout(getLed,timevalue[2]*1000);}Array.prototype.max = function () {    return Math.max.apply(Math, this);};function getNDynamicMonitor1(){    Highcharts.setOptions({		global : {			useUTC : false		}	});			chart1 = new Highcharts.StockChart({		chart : {			renderTo : 'smonitor1',			events : {				load : function() {					// set up the updating of the chart each second					var series = this.series[0];					setInterval(function() {						var x = (new Date()).getTime(), // current time						y = 0;						getDynamicMonitor(monitor,2,1);						var temp = dmonitor1_value.split(":");						temp.shift();						y = temp[0] - 0;						series.addPoint([x, y], true, true);					}, timevalue[1]*1000);				}			}		},				rangeSelector: {			buttons: [{				count: 1,				type: 'minute',				text: '1M'			}, {				count: 5,				type: 'minute',				text: '5M'			}, {				type: 'all',				text: 'All'			}],			inputEnabled: false,			selected: 0		},				title : {			text : monitor_name + " @ Y rate "		},				exporting: {			enabled: false		},				series : [{			name : monitor_name,			data : (function() {				// generate an array of random data				var data = [], time = (new Date()).getTime(), i;				    	getDynamicMonitor(monitor,2,200);						var temp = dmonitor1_value.split(":");						temp.shift();						for(i=-199;i<0-temp.length;i++){														data.push([								time + i * 1000 * timevalue[1],								null							]);						}						for(i=0-temp.length;i<0;i++){														data.push([								time + i * 1000 * timevalue[1],								temp[-1-i] - 0							]);						}				return data;			})()		}]	});} function getNDynamicMonitor2(){    Highcharts.setOptions({		global : {			useUTC : false		}	});			chart3 = new Highcharts.StockChart({		chart : {			renderTo : 'smonitor2',			events : {				load : function() {					// set up the updating of the chart each second					var series = this.series[0];					setInterval(function() {						var x = (new Date()).getTime(), // current time						y = 0;						getDynamicMonitor1(monitor,1,1);						var temp = dmonitor2_value.split(":");						temp.shift();						y = temp[0] - 0;						series.addPoint([x, y], true, true);					}, timevalue[0]*1000);				}			}		},				rangeSelector: {			buttons: [{				count: 1,				type: 'minute',				text: '1M'			}, {				count: 5,				type: 'minute',				text: '5M'			}, {				type: 'all',				text: 'All'			}],			inputEnabled: false,			selected: 0		},				title : {			text : monitor_name + " @ X rate "		},				exporting: {			enabled: false		},				series : [{			name : monitor_name,			data : (function() {				// generate an array of random data				var data = [], time = (new Date()).getTime(), i;				    	getDynamicMonitor1(monitor,1,200);						var temp = dmonitor2_value.split(":");						temp.shift();												for(i=-199;i<0-temp.length;i++){														data.push([								time + i * 1000 * timevalue[0],								null							]);						}						for(i=0-temp.length;i<0;i++){														data.push([								time + i * 1000 * timevalue[0],								temp[-1-i] - 0							]);						}				return data;			})()		}]	});} function createCharty(){        Highcharts.setOptions({            global: {                useUTC: false            }        });                    chart2 = new Highcharts.Chart({            chart: {                renderTo: 'smonitor1y',                type: 'spline',                marginRight: 10,				events : {					load : function() {										setInterval(function() {							var x = (new Date()).getTime();							var y = 0 , ykeys = 0;							poll1(monitor,2,1);							var series1 = chart2.series;							for(var key in lgraphvalue1) {																var tempy1 = lgraphvalue1[key].split(":");								tempy1.shift();								y = tempy1[0] - 0;								series1[ykeys].addPoint([x, y], true, true);								ykeys++;							}						}, 1000 * timevalue[1]);					}				}            },            title: {                text: monitor_name + " Individual Elements @ Y Rate"            },            xAxis: {                type: 'datetime',                tickPixelInterval: 150            },            yAxis: {                title: {                    text: 'Value'                },                plotLines: [{                    value: 0,                    width: 1,                    color: '#808080'                }]            },            tooltip: {                formatter: function() {                        return '<b>'+ this.series.name +'</b><br/>'+                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) +'<br/>'+                        Highcharts.numberFormat(this.y, 2);                }            },            legend: {                enabled: true,            },            exporting: {                enabled: false            },            series: seriesoptiony        });				} function createChartx(){        Highcharts.setOptions({            global: {                useUTC: false            }        });                    chart4 = new Highcharts.Chart({            chart: {                renderTo: 'smonitor2x',                type: 'spline',                marginRight: 10,				events : {					load : function() {										setInterval(function() {							var x = (new Date()).getTime();							var y = 0 , xkeys = 0;							poll2(monitor,1,1);							var series1 = chart4.series;							for(var key in lgraphvalue2) {																var tempy1 = lgraphvalue2[key].split(":");								tempy1.shift();								y = tempy1[0] - 0;								series1[xkeys].addPoint([x, y], true, true);								xkeys++;							}						}, 1000 * timevalue[0]);					}				}            },            title: {                text: monitor_name + " Individual Elements @ X Rate"            },            xAxis: {                type: 'datetime',                tickPixelInterval: 150            },            yAxis: {                title: {                    text: 'Value'                },                plotLines: [{                    value: 0,                    width: 1,                    color: '#808080'                }]            },            tooltip: {                formatter: function() {                        return '<b>'+ this.series.name +'</b><br/>'+                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) +'<br/>'+                        Highcharts.numberFormat(this.y, 2);                }            },            legend: {                enabled: true            },            exporting: {                enabled: false            },            series: seriesoptionx        });				} function getNDynamicMonitor1y () {	poll1(monitor,2,200);	var time = (new Date()).getTime();	if(typeof lgraphvalue1 != 'undefined'){		ykeys = 0;		for(var key in lgraphvalue1) {			var tempy1 = lgraphvalue1[key].split(":");			var ykey_name = tempy1.shift();			//tempy1.reverse();			var data = [];			for(i=-199;i<0-tempy1.length;i++){											data.push([					time + i * 1000 * timevalue[1],					null				]);			}															for(i=0-tempy1.length;i<0;i++){											data.push([					time + i * 1000 * timevalue[1],					tempy1[-1-i] - 0				]);			}									seriesoptiony[ykeys] = {				name: ykey_name,				data: data      			};			ykeys++;		}	    	}		createCharty();}function getNDynamicMonitor2x () {	poll2(monitor,1,200);	var time = (new Date()).getTime();	if(typeof lgraphvalue2 != 'undefined'){		xkeys = 0;		for(var key in lgraphvalue2) {			var tempx1 = lgraphvalue2[key].split(":");			var xkey_name = tempx1.shift();			var data = [];			for(i=-199;i<0-tempx1.length;i++){											data.push([					time + i * 1000 * timevalue[0],					null				]);			}															for(i=0-tempx1.length;i<0;i++){											data.push([					time + i * 1000 * timevalue[0] ,					tempx1[-1-i] - 0				]);			}									seriesoptionx[xkeys] = {				name: xkey_name,				data: data      			};			xkeys++;		}	    	}		createChartx();}function checkLogin() {	var user = getCookie("user");	if (user == null || user =="") {		$.blockUI({ message: $('#loginForm') });	}}function getCookie(c_name){	var i,x,y,ARRcookies=document.cookie.split(";");	for (i=0;i<ARRcookies.length;i++)	{	  x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));	  y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);	  x=x.replace(/^\s+|\s+$/g,"");	  if (x==c_name)		{		return unescape(y);		}	  }}function logValidate() {    $.ajax({        type: "POST", 		data: {action: 'login',usr:document.getElementById('usr').value,pass:document.getElementById('pass').value},		cache: false,		url: "db.php",		async: false,		success: function(data){			if(data == "success"){				var user = getCookie("user");				if (user == null || user =="") {					$('#logres').html("wrong user name and password")				}else {					$.unblockUI();				}							}else {				$('#logres').html("wrong user name and password");			}		}	}); }function deleteCookie(c_name) {    document.cookie = encodeURIComponent(c_name) + "=deleted; expires=" + new Date(0).toUTCString();}var paramdetails;function getNDetails(){	readDetails();	if(typeof paramdetails != 'undefined'){		if(typeof paramdetails['INIT_ORA'] != 'undefined'){			$('#madvice').html("");			for(no_init=0;no_init<paramdetails['INIT_ORA'].length;no_init++){				var headtext =paramdetails['INIT_ORA'][no_init].split(":");				$('#madvice').append('<div id="inithead"> <span id="headin">' + headtext[0] + '</span>:' + headtext[1] + '  </ div>' );			}		}		if(typeof paramdetails['PARENT'] != 'undefined'){			headtext = paramdetails['PARENT'][0].split(":");			$('#smonitor2t').html('<div id="inithead"> <span id="headin">' + headtext[0] + '</span>:' + headtext[1] + '  </ div>' );			$('#smonitor1t').html('<div id="inithead"> <span id="headin">' + headtext[0] + '</span>:' + headtext[1] + '  </ div>' );		}		if(typeof paramdetails['CHILD'] != 'undefined'){			for(no_init=0;no_init<paramdetails['CHILD'].length;no_init++){				headtext =paramdetails['CHILD'][no_init].split(":");				$('#smonitor1yt').append('<div id="inithead"> <span id="headin">' + headtext[0] + '</span>:' + headtext[1] + '  </ div>' );				$('#smonitor2xt').append('<div id="inithead"> <span id="headin">' + headtext[0] + '</span>:' + headtext[1] + '  </ div>' );			}		}		}		setTimeout(getNDetails,timevalue[1]*1000);	}function readDetails() {	$.ajax({		type: "POST", 		data: {action: 'paramDetails',id:monitor,lgr:2},		cache: false,		url: "ldb.php",		async: false,		success: function(data){			paramdetails = eval('(' + data + ')');		}	});}var childbases;function getBaseLineParam() {	getChildBase();	if(typeof childbases != 'undefined'){			for(i=0;i<childbases.length;i++){						$('#bschild').append('<div id="bsin"><div class="leftplc" id="bchildn"> <span id="chheading">' + childbases[i][1] + '</span>:</div> <div class="leftplc" id="bchildv"> Current Value :' + childbases[i][2] + '</div><div class="leftplc" id="bchildbt"> <a href="#" class="bsbutton" onclick="setBaseline('+childbases[i][0]+',\''+ childbases[i][1]+'\',0)">basesline</a> </div> <div class="leftplc" id="bchildbtr"> <a href="#" class="bsbutton" onclick="resetBaseline('+childbases[i][0]+',\''+childbases[i][1]+'\',0)">reset</a> </ div></div>' );		}		if(childbases.length > 1){			$('#bschild').append('<div id="bsinall"><div class="leftplc" id="bchildbt"> <a href="#" class="bsbutton" onclick="setBaseline('+monitor+',\''+monitor_name+'\',1)">Basesline All</a> </div> <div class="leftplc" id="bchildbtr"> <a href="#" class="bsbutton" onclick="resetBaseline('+monitor+',\''+monitor_name+'\',1)">Reset All</a> </ div></div>' );		}		}	}function setBaseline(id,name,lgr){	$.ajax({		type: "POST", 		data: {action: 'setbaseparam',id:id,lgr:lgr},		cache: false,		url: "ldb.php",		async: false,		success: function(prdata){			var result = eval('(' + prdata + ')');			$('#bschild').html("");			getBaseLineParam();			if(result == 'FAIL'){				$('#bsresult').html(name+" has " +result);			}else{				$('#bsresult').html(name+" has been set to " +result);			}		}	});}	function resetBaseline(id,name,lgr){	$.ajax({		type: "POST", 		data: {action: 'resetbaseparam',id:id,lgr:lgr},		cache: false,		url: "ldb.php",		async: false,		success: function(prdata){			var result = eval('(' + prdata + ')');			$('#bschild').html("");			getBaseLineParam();			if(result != 'RESET'){				$('#bsresult').html(name+" has " +result);			}else{				$('#bsresult').html(name+" has been resetted");			}		}	});}function getChildBase() {	$.ajax({		type: "POST", 		data: {action: 'getbaseparam',id:monitor},		cache: false,		url: "ldb.php",		async: false,		success: function(prdata){			childbases = eval('(' + prdata + ')');					}	});}